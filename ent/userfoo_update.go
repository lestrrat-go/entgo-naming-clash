// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/user"
	"entgo.io/bug/ent/userfoo"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFooUpdate is the builder for updating UserFoo entities.
type UserFooUpdate struct {
	config
	hooks    []Hook
	mutation *UserFooMutation
}

// Where appends a list predicates to the UserFooUpdate builder.
func (ufu *UserFooUpdate) Where(ps ...predicate.UserFoo) *UserFooUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetDummy sets the "dummy" field.
func (ufu *UserFooUpdate) SetDummy(s string) *UserFooUpdate {
	ufu.mutation.SetDummy(s)
	return ufu
}

// AddParentIDs adds the "parent" edge to the User entity by IDs.
func (ufu *UserFooUpdate) AddParentIDs(ids ...int) *UserFooUpdate {
	ufu.mutation.AddParentIDs(ids...)
	return ufu
}

// AddParent adds the "parent" edges to the User entity.
func (ufu *UserFooUpdate) AddParent(u ...*User) *UserFooUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufu.AddParentIDs(ids...)
}

// Mutation returns the UserFooMutation object of the builder.
func (ufu *UserFooUpdate) Mutation() *UserFooMutation {
	return ufu.mutation
}

// ClearParent clears all "parent" edges to the User entity.
func (ufu *UserFooUpdate) ClearParent() *UserFooUpdate {
	ufu.mutation.ClearParent()
	return ufu
}

// RemoveParentIDs removes the "parent" edge to User entities by IDs.
func (ufu *UserFooUpdate) RemoveParentIDs(ids ...int) *UserFooUpdate {
	ufu.mutation.RemoveParentIDs(ids...)
	return ufu
}

// RemoveParent removes "parent" edges to User entities.
func (ufu *UserFooUpdate) RemoveParent(u ...*User) *UserFooUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufu.RemoveParentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UserFooUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ufu.hooks) == 0 {
		affected, err = ufu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserFooMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ufu.mutation = mutation
			affected, err = ufu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ufu.hooks) - 1; i >= 0; i-- {
			if ufu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ufu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ufu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UserFooUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UserFooUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UserFooUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufu *UserFooUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userfoo.Table,
			Columns: userfoo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userfoo.FieldID,
			},
		},
	}
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.Dummy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userfoo.FieldDummy,
		})
	}
	if ufu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userfoo.ParentTable,
			Columns: userfoo.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.RemovedParentIDs(); len(nodes) > 0 && !ufu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userfoo.ParentTable,
			Columns: userfoo.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userfoo.ParentTable,
			Columns: userfoo.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfoo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserFooUpdateOne is the builder for updating a single UserFoo entity.
type UserFooUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFooMutation
}

// SetDummy sets the "dummy" field.
func (ufuo *UserFooUpdateOne) SetDummy(s string) *UserFooUpdateOne {
	ufuo.mutation.SetDummy(s)
	return ufuo
}

// AddParentIDs adds the "parent" edge to the User entity by IDs.
func (ufuo *UserFooUpdateOne) AddParentIDs(ids ...int) *UserFooUpdateOne {
	ufuo.mutation.AddParentIDs(ids...)
	return ufuo
}

// AddParent adds the "parent" edges to the User entity.
func (ufuo *UserFooUpdateOne) AddParent(u ...*User) *UserFooUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufuo.AddParentIDs(ids...)
}

// Mutation returns the UserFooMutation object of the builder.
func (ufuo *UserFooUpdateOne) Mutation() *UserFooMutation {
	return ufuo.mutation
}

// ClearParent clears all "parent" edges to the User entity.
func (ufuo *UserFooUpdateOne) ClearParent() *UserFooUpdateOne {
	ufuo.mutation.ClearParent()
	return ufuo
}

// RemoveParentIDs removes the "parent" edge to User entities by IDs.
func (ufuo *UserFooUpdateOne) RemoveParentIDs(ids ...int) *UserFooUpdateOne {
	ufuo.mutation.RemoveParentIDs(ids...)
	return ufuo
}

// RemoveParent removes "parent" edges to User entities.
func (ufuo *UserFooUpdateOne) RemoveParent(u ...*User) *UserFooUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufuo.RemoveParentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UserFooUpdateOne) Select(field string, fields ...string) *UserFooUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UserFoo entity.
func (ufuo *UserFooUpdateOne) Save(ctx context.Context) (*UserFoo, error) {
	var (
		err  error
		node *UserFoo
	)
	if len(ufuo.hooks) == 0 {
		node, err = ufuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserFooMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ufuo.mutation = mutation
			node, err = ufuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ufuo.hooks) - 1; i >= 0; i-- {
			if ufuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ufuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ufuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UserFooUpdateOne) SaveX(ctx context.Context) *UserFoo {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UserFooUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UserFooUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufuo *UserFooUpdateOne) sqlSave(ctx context.Context) (_node *UserFoo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userfoo.Table,
			Columns: userfoo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userfoo.FieldID,
			},
		},
	}
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFoo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfoo.FieldID)
		for _, f := range fields {
			if !userfoo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfoo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.Dummy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userfoo.FieldDummy,
		})
	}
	if ufuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userfoo.ParentTable,
			Columns: userfoo.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.RemovedParentIDs(); len(nodes) > 0 && !ufuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userfoo.ParentTable,
			Columns: userfoo.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userfoo.ParentTable,
			Columns: userfoo.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserFoo{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfoo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
