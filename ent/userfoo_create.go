// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/user"
	"entgo.io/bug/ent/userfoo"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFooCreate is the builder for creating a UserFoo entity.
type UserFooCreate struct {
	config
	mutation *UserFooMutation
	hooks    []Hook
}

// SetDummy sets the "dummy" field.
func (ufc *UserFooCreate) SetDummy(s string) *UserFooCreate {
	ufc.mutation.SetDummy(s)
	return ufc
}

// AddParentIDs adds the "parent" edge to the User entity by IDs.
func (ufc *UserFooCreate) AddParentIDs(ids ...int) *UserFooCreate {
	ufc.mutation.AddParentIDs(ids...)
	return ufc
}

// AddParent adds the "parent" edges to the User entity.
func (ufc *UserFooCreate) AddParent(u ...*User) *UserFooCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufc.AddParentIDs(ids...)
}

// Mutation returns the UserFooMutation object of the builder.
func (ufc *UserFooCreate) Mutation() *UserFooMutation {
	return ufc.mutation
}

// Save creates the UserFoo in the database.
func (ufc *UserFooCreate) Save(ctx context.Context) (*UserFoo, error) {
	var (
		err  error
		node *UserFoo
	)
	if len(ufc.hooks) == 0 {
		if err = ufc.check(); err != nil {
			return nil, err
		}
		node, err = ufc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserFooMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ufc.check(); err != nil {
				return nil, err
			}
			ufc.mutation = mutation
			if node, err = ufc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ufc.hooks) - 1; i >= 0; i-- {
			if ufc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ufc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ufc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ufc *UserFooCreate) SaveX(ctx context.Context) *UserFoo {
	v, err := ufc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufc *UserFooCreate) Exec(ctx context.Context) error {
	_, err := ufc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufc *UserFooCreate) ExecX(ctx context.Context) {
	if err := ufc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufc *UserFooCreate) check() error {
	if _, ok := ufc.mutation.Dummy(); !ok {
		return &ValidationError{Name: "dummy", err: errors.New(`ent: missing required field "UserFoo.dummy"`)}
	}
	return nil
}

func (ufc *UserFooCreate) sqlSave(ctx context.Context) (*UserFoo, error) {
	_node, _spec := ufc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ufc *UserFooCreate) createSpec() (*UserFoo, *sqlgraph.CreateSpec) {
	var (
		_node = &UserFoo{config: ufc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userfoo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userfoo.FieldID,
			},
		}
	)
	if value, ok := ufc.mutation.Dummy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userfoo.FieldDummy,
		})
		_node.Dummy = value
	}
	if nodes := ufc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   userfoo.ParentTable,
			Columns: userfoo.ParentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserFooCreateBulk is the builder for creating many UserFoo entities in bulk.
type UserFooCreateBulk struct {
	config
	builders []*UserFooCreate
}

// Save creates the UserFoo entities in the database.
func (ufcb *UserFooCreateBulk) Save(ctx context.Context) ([]*UserFoo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ufcb.builders))
	nodes := make([]*UserFoo, len(ufcb.builders))
	mutators := make([]Mutator, len(ufcb.builders))
	for i := range ufcb.builders {
		func(i int, root context.Context) {
			builder := ufcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserFooMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufcb *UserFooCreateBulk) SaveX(ctx context.Context) []*UserFoo {
	v, err := ufcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufcb *UserFooCreateBulk) Exec(ctx context.Context) error {
	_, err := ufcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufcb *UserFooCreateBulk) ExecX(ctx context.Context) {
	if err := ufcb.Exec(ctx); err != nil {
		panic(err)
	}
}
