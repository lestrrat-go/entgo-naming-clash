// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/bug/ent/userfoo"
	"entgo.io/ent/dialect/sql"
)

// UserFoo is the model entity for the UserFoo schema.
type UserFoo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Dummy holds the value of the "dummy" field.
	Dummy string `json:"dummy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserFooQuery when eager-loading is set.
	Edges UserFooEdges `json:"edges"`
}

// UserFooEdges holds the relations/edges for other nodes in the graph.
type UserFooEdges struct {
	// Parent holds the value of the parent edge.
	Parent []*User `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading.
func (e UserFooEdges) ParentOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserFoo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userfoo.FieldID:
			values[i] = new(sql.NullInt64)
		case userfoo.FieldDummy:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserFoo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserFoo fields.
func (uf *UserFoo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userfoo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uf.ID = int(value.Int64)
		case userfoo.FieldDummy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dummy", values[i])
			} else if value.Valid {
				uf.Dummy = value.String
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the UserFoo entity.
func (uf *UserFoo) QueryParent() *UserQuery {
	return (&UserFooClient{config: uf.config}).QueryParent(uf)
}

// Update returns a builder for updating this UserFoo.
// Note that you need to call UserFoo.Unwrap() before calling this method if this UserFoo
// was returned from a transaction, and the transaction was committed or rolled back.
func (uf *UserFoo) Update() *UserFooUpdateOne {
	return (&UserFooClient{config: uf.config}).UpdateOne(uf)
}

// Unwrap unwraps the UserFoo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uf *UserFoo) Unwrap() *UserFoo {
	tx, ok := uf.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserFoo is not a transactional entity")
	}
	uf.config.driver = tx.drv
	return uf
}

// String implements the fmt.Stringer.
func (uf *UserFoo) String() string {
	var builder strings.Builder
	builder.WriteString("UserFoo(")
	builder.WriteString(fmt.Sprintf("id=%v", uf.ID))
	builder.WriteString(", dummy=")
	builder.WriteString(uf.Dummy)
	builder.WriteByte(')')
	return builder.String()
}

// UserFoos is a parsable slice of UserFoo.
type UserFoos []*UserFoo

func (uf UserFoos) config(cfg config) {
	for _i := range uf {
		uf[_i].config = cfg
	}
}
